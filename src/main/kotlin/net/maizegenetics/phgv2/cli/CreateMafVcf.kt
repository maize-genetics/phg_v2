package net.maizegenetics.phgv2.cli

import biokotlin.genome.*
import biokotlin.seq.NucSeq
import biokotlin.seqIO.NucSeqIO
import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.*
import htsjdk.variant.variantcontext.VariantContext
import htsjdk.variant.vcf.VCFHeaderLine
import net.maizegenetics.phgv2.utils.*
import net.maizegenetics.phgv2.utils.Position
import org.apache.logging.log4j.LogManager
import java.io.File

data class HVCFRecordMetadata(val sampleName: String, val refSeq : String = "", val asmSeq : String = "",
                              val refContig : String, val refStart: Int, val refEnd: Int,
                              val asmRegions: List<Pair<Position,Position>>)
data class DisplayRegion(val contig: String, val start: Int, val end: Int)


class CreateMafVcf : CliktCommand(help = "Create g.vcf and h.vcf files from AnchorWave MAF files") {

    private val myLogger = LogManager.getLogger(CreateMafVcf::class.java)
    val bed by option(help = "BED file with entries that define the haplotype boundaries")
        .required()

    val referenceFile by option(help = "Path to local Reference FASTA file")
        .required()

    val mafDir by option(help = "MAF file directory")
        .required()

    val outputDir by option("-o", "--output-dir", help = "Name for output VCF file Directory")
        .required()

    val dbPath by option(help = "Folder name where TileDB datasets and AGC record is stored.  If not provided, the current working directory is used")
        .default("")

    val metricsFile by option("--metrics-file", help = "Path where the vcf metrics file will be written. By default writes to output-dir/VCFMetrics.tsv")
        .default("")

    val skipMetrics by option("--skip-metrics", help = "If this flag is set, do not calculate vcf metrics.")
        .switch(
            "--skip-metrics" to true
        ).default(false)

    val condaEnvPrefix by option (help = "Prefix for the conda environment to use.  If provided, this should be the full path to the conda environment.")
        .default("")

    val legacyMafFile by option(help = "Flag to be backwards compatible with old MAF files generated by anchorwave before version 1.2.3.")
        .flag(default = false)

    /**
     * Function to create the ASM hVCF and gVCF.
     * It will first use Biokotlin to build the gVCF and then will use the BED file to extract out the hVCF information.
     * if [twoGvcfs] is true, then the output will be split into two gvcf files, one for each gamete.
     */
    private fun createASMHvcfs(
        dbPath: String,
        bedFileName: String,
        referenceFileName: String,
        mafDirName: String,
        outputDirName: String,
        metricsFile: String,
        skipMetrics: Boolean = false,
        twoGvcfs: Boolean = false,
        legacyMafFile: Boolean = false
    ) {
        val mafToGVCFObject = MAFToGVCF()

        // load the bed file into some data structure
        val ranges = loadRanges(bedFileName)
        myLogger.info("CreateASMHvcfs: calling buildRefGenomeSeq")
        val refGenomeSequence = buildRefGenomeSeq(referenceFileName)

        // ContigList is needed for sorting the variants.
        // In Biokotlin, these are sorted by the method that calls
        // getVariantContextsfromMAF() in MAFToGVCF.kt. We call MAFTOgVCF.getVariantContextsfromMAF()
        // directly, so must sort the contigs here.
        val contigList = refGenomeSequence.keys.toList().sorted()

        // loop through the maf files in mafDirName and getGVCFVariantsFromMafFile
        File(mafDirName).walk().filter { !it.isHidden && !it.isDirectory }
            .filter { it.extension == "maf" }
            .forEach { originalFileName ->
                myLogger.info("CreateASMHvcfs: processing ${originalFileName.absolutePath}")
                val sampleName = originalFileName.nameWithoutExtension //This will likely need to change in the future
                val gvcfVariants = getGVCFVariantsFromMafFile(mafToGVCFObject,refGenomeSequence, originalFileName.absolutePath, originalFileName.nameWithoutExtension, twoGvcfs=twoGvcfs, legacyMafFile=legacyMafFile)
                //export the gvcfRecords
                if (gvcfVariants.size == 1){
                    myLogger.info("createASMHvcfs: gvcfVariants.size == 1")
                    val sampleName = gvcfVariants.keys.first()

                    processGameteGVCFToHVCF(gvcfVariants.values.first(), mafToGVCFObject, sampleName, sampleName, arrayOf("${outputDirName}/${originalFileName.nameWithoutExtension}.g.vcf"), 0, refGenomeSequence, dbPath, ranges, outputDirName, originalFileName)

                } else if (gvcfVariants.size == 2) {
                    myLogger.info("createASMHvcfs: gvcfVariants.size == 2")
                    val gvcfOutput = "${outputDirName}/${originalFileName.nameWithoutExtension}.g.vcf"
                    val outputNames = MAFToGVCF().twoOutputFiles(gvcfOutput)
                    gvcfVariants.entries.forEachIndexed { index, (name, variants) ->
                        processGameteGVCFToHVCF(
                            variants,
                            mafToGVCFObject,
                            sampleName,
                            name,
                            outputNames,
                            index,
                            refGenomeSequence,
                            dbPath,
                            ranges,
                            outputDirName,
                            originalFileName
                        )
                    }

                }

            }
        // calculate vcf metrics, unless skipMetrics flag has been set
        if(!skipMetrics) {
            CalcVcfMetrics().calculateVcfMetrics(outputDir, metricsFile)
        }

    }

    /**
     * Function to process the VariantInfo GVCF objects into VariantContexts and then into hvcf variants
     */
    private fun processGameteGVCFToHVCF(
        variants: List<AssemblyVariantInfo>,
        mafToGVCFObject: MAFToGVCF,
        sampleName: String,
        exportName: String,
        outputNames: Array<String>,
        index: Int,
        refGenomeSequence: Map<String, NucSeq>,
        dbPath: String,
        ranges: List<Pair<Position, Position>>,
        outputDirName: String,
        originalFileName: File
    ) {
        val sortedVariants = variants.sortedBy { variant -> Position(variant.chr, variant.startPos) }

        exportVariantInfo(exportName, sortedVariants, outputNames[index], refGenomeSequence, setOf(),mafToGVCFObject)
        bgzipAndIndexGVCFfile(outputNames[index])
        val asmHeaderLines = mutableMapOf<String, VCFHeaderLine>()
        //convert the GVCF records into hvcf records
        val hvcfVariants = convertGVCFToHVCFVariantInfo(
            dbPath,
            sampleName,
            ranges,
            sortedVariants,
            refGenomeSequence,
            asmHeaderLines,
            condaEnvPrefix
        )
        val asmHeaderSet = asmHeaderLines.values.toSet()
        //export the hvcfRecords
        exportVariantContext(
            sampleName,
            hvcfVariants,
            "${outputDirName}/${originalFileName.nameWithoutExtension}.h.vcf",
            refGenomeSequence,
            asmHeaderSet
        )
        //bgzip the files
        bgzipAndIndexGVCFfile("${outputDirName}/${originalFileName.nameWithoutExtension}.h.vcf")
    }

    // Function to load in the reference using Biokotlin
    fun buildRefGenomeSeq(referenceFileName: String) : Map<String, NucSeq> {
        return NucSeqIO(referenceFileName).readAll()
    }

    /**
     * Simple Wrapper Function to call biokotlin's MAFToGVCF.getVariantContextsfromMAF
     * The parameters to BioKotlin's (version 0.10) getVariantContextsfromMAF are:
     * 1. [mafFileName] - the name of the MAF file
     * 2. [refGenomeSequence] - the reference genome sequence
     * 3. [sampleName] - the name of the sample
     * 4. [fillGaps] - whether to fill in the gaps in the MAF file, default is false
     * 5. [twoGvcfs] - whether to split the output into two gvcf files, default false
     * 6. [outJustGT] - whether to only output the GT field, default false
     * 7. [outputType] - either gvcf or vcf (BioKotlin doesn't currently have h.vcf, default is gvcf)
     *
     */
    private fun getGVCFVariantsFromMafFile(mafToGVCFObject: MAFToGVCF,refSeq: Map<String,NucSeq>, mafFileName : String,
                                           sampleName: String, fillGaps: Boolean = false, twoGvcfs: Boolean = false, legacyMafFile: Boolean = false) : Map<String,List<AssemblyVariantInfo>> {
        return mafToGVCFObject.getVariantContextsfromMAF(
            mafFileName,
            refSeq,
            sampleName,
            fillGaps,
            twoGvcfs,
            anchorwaveLegacy = legacyMafFile
        )
    }

    /**
     * Function to convert a GVCF file into an HCVF file
     */
    fun convertGVCFToHVCFVariantInfo(dbPath: String,sampleName: String, bedRanges : List<Pair<Position,Position>>, gvcfVariants: List<AssemblyVariantInfo>,
                          refGenomeSequence : Map<String, NucSeq>, asmHeaders: MutableMap<String,VCFHeaderLine>,condaEnvPrefix:String = "") : List<VariantContext> {
        // group the gvcfVariants by contig
        val gvcfVariantsByContig = gvcfVariants.groupBy { it.chr }

        val bedRegionsByContig = bedRanges.groupBy { it.first.contig }


        myLogger.info("in convertGVCFToHVCF: sort and call converGVCFToHVCFForChrom")
        return gvcfVariantsByContig.keys
            .sortedWith(compareBy(SeqRangeSort.alphaThenNumberSort){ name:String -> name}) //Need to do a sort here as we need to make sure we process the chromosomes in
            .filter { bedRegionsByContig.containsKey(it) }
            .flatMap { convertGVCFToHVCFForChromVariantInfo(dbPath, sampleName, bedRegionsByContig[it]!!, refGenomeSequence, gvcfVariantsByContig[it]!!, asmHeaders,condaEnvPrefix) }
    }


    private fun convertGVCFToHVCFForChromVariantInfo(dbPath: String, sampleName: String, bedRanges: List<Pair<Position,Position>>, refGenomeSequence: Map<String, NucSeq>, variantInfos: List<AssemblyVariantInfo>, asmHeaders: MutableMap<String,VCFHeaderLine>, condaEnvPrefix:String = "" ) : List<VariantContext> {

        /**
         * Loop through the bed file
         * Loop through the gvcf records as well
         *
         * We need to determine if our BED region overlaps with the gvcf record
         * To do this we need to collect the gvcf records into their corresponding bed Regions
         * Then from those collected regions, we take the first and last ones and resize based on the bed regions to get the asm_Start and asm_End
         * Then extract the sequence out of the AGC archive and md5 hash it
         * Then call the createHVCFRecord with this information
         */
        myLogger.info("in convertGVCFToHVCFForChrom: bedRanges.size = ${bedRanges.size}")
        val outputVariantMetadata = mutableListOf<HVCFRecordMetadata>()
        var currentVariantIdx = 0
        for(region in bedRanges) {
            val regionStart = region.first.position
            val regionEnd = region.second.position
            val regionChrom = region.first.contig
            val tempVariants = mutableListOf<AssemblyVariantInfo>()

            check(regionChrom in refGenomeSequence.keys) { "Chromosome $regionChrom not found in reference" }

            //Need to subtract here as the Biokotlin NucSeq is 0 based
            val refRangeSeq = refGenomeSequence[regionChrom]!![regionStart-1..regionEnd-1]

            while (currentVariantIdx < variantInfos.size) {
                val currentVariantInfo = variantInfos[currentVariantIdx]

                //check different cases for the variant
                //If variant is fully contained in Bed region add to temp list and increment currentVariantIdx
                //If variant is partially contained in Bed region add to temp list do not increment as we need to see if the next bed also overlaps
                //If variant is not contained in Bed region, skip and do not increment as we need to see if the next bed overlaps
                if(AssemblyVariantInfoUtils.bedRegionContainedInVariantInfo(region, currentVariantInfo)) {
                    outputVariantMetadata.add(
                        convertGVCFRecordsToHVCFMetaDataVariantInfo(
                            sampleName,
                            region,
                            refRangeSeq,
                            listOf(currentVariantInfo)
                        )
                    )
                    tempVariants.clear()
                    break
                }
                if(AssemblyVariantInfoUtils.variantInfoFullyContained(region, currentVariantInfo)) {
                    //This is the case where the variant is completely contained within the region
                    tempVariants.add(currentVariantInfo)
                    currentVariantIdx++
                }
                else if(AssemblyVariantInfoUtils.variantInfoPartiallyContainedStart(region,currentVariantInfo)) {
                    tempVariants.add(currentVariantInfo)
                    break
                }
                else if(AssemblyVariantInfoUtils.variantInfoPartiallyContainedEnd(region, currentVariantInfo)) {
                    tempVariants.add(currentVariantInfo)
                    currentVariantIdx++
                }
                else if(AssemblyVariantInfoUtils.variantInfoAfterRegion(region, currentVariantInfo)) {
                    //write out what is in tempVariants
                    if(tempVariants.isNotEmpty()) {
                        outputVariantMetadata.add(
                            convertGVCFRecordsToHVCFMetaDataVariantInfo(sampleName,
                                region,
                                refRangeSeq,
                                tempVariants
                            )
                        )

                        tempVariants.clear()
                    }
                    //move up Bed region
                    break
                }
                else { //this is the case if the Variant is behind the BED region
                    //move up Variant
                    currentVariantIdx++
                }
            }

            if(tempVariants.isNotEmpty()) {
                outputVariantMetadata.add(convertGVCFRecordsToHVCFMetaDataVariantInfo(
                    sampleName,
                    region,
                    refRangeSeq,
                    tempVariants
                ))
                tempVariants.clear()
            }
        }

        val metaDataWithSequence = CreateMafVcfUtils.addSequencesToMetaData(dbPath, outputVariantMetadata, condaEnvPrefix)
        val outputVariants = CreateMafVcfUtils.convertMetaDataToHVCFContexts(metaDataWithSequence, asmHeaders, dbPath)

        return outputVariants
    }


    /**
     * Function to extract all the needed information out of the ASM gVCF record and put them into HVCFRecordMetadata objects
     * This will first try to resize the positions based on the ref start position and then will extract out all the other information.
     */
    private fun convertGVCFRecordsToHVCFMetaDataVariantInfo(sampleName: String, region: Pair<Position,Position>, refRangeSeq: NucSeq, variants: List<AssemblyVariantInfo> ) : HVCFRecordMetadata {
        //Take the first and the last variantVariantInfo
        val firstVariant = variants.first()
        val lastVariant = variants.last()

        //val check strandedness of the variants
        val firstStrand = firstVariant.asmStrand

        val lastStrand = lastVariant.asmStrand
        //Resize the first and last variantContext ASM start and end based on the regions
        var newASMStart = AssemblyVariantInfoUtils.resizeVariantInfo(firstVariant, region.first.position, firstStrand)
        if(newASMStart == -1) {
            newASMStart = if(firstStrand == "+") firstVariant.asmStart
            else firstVariant.asmEnd
        }

        var newASMEnd = AssemblyVariantInfoUtils.resizeVariantInfo(lastVariant, region.second.position, lastStrand)
        if(newASMEnd == -1) {
            newASMEnd = if(lastStrand == "+") lastVariant.asmEnd
            else lastVariant.asmStart
        }

        val regions = buildNewAssemblyRegionsVariantInfo(newASMStart,newASMEnd,variants)


        return HVCFRecordMetadata(sampleName=sampleName, refSeq = refRangeSeq.toString(), asmSeq = "",
            refContig = region.first.contig, refStart = region.first.position, refEnd = region.second.position,
            regions)

    }




    /**
     * Function to build the new assembly region coordinates based on the new Start and end and the list of VariantContexts
     * Any consecutive regions should be merged together so we do not make the eventual string too long
     * The output will be a List<Pair<Position,Position>> which will be the new coordinates for the all the  assembly regions
     */
    fun buildNewAssemblyRegionsVariantInfo(newStart: Int, newEnd: Int, variants: List<AssemblyVariantInfo>) : List<Pair<Position,Position>> {
        val variantsConverted = variants.map { convertVariantInfoToPositionRange(it) }

        //resize the first and last position based on the strand
        val resizedFirst = CreateMafVcfUtils.resizePositionRange(variantsConverted.first(),newStart,true)
        val resizedLast = CreateMafVcfUtils.resizePositionRange(variantsConverted.last(),newEnd,false)

        //merge the first and last with the rest of the variants
        val mergedVariants = mutableListOf<Pair<Position,Position>>()
        if(variantsConverted.size == 1) {
            val resizedFirstAndLast = CreateMafVcfUtils.resizePositionRange(CreateMafVcfUtils.resizePositionRange(variantsConverted.first(), newStart, true), newEnd, false)
            mergedVariants.add(resizedFirstAndLast)
        } else {
            mergedVariants.add(resizedFirst) // add the first variant
            if (variantsConverted.size > 2) { // add any variants in the middle
                mergedVariants.addAll(variantsConverted.subList(1, variantsConverted.size - 1))
            }
            mergedVariants.add(resizedLast) // add the last variant
        }

        //merge the consecutive regions
        val mergedConsecutiveVariants = CreateMafVcfUtils.mergeConsecutiveRegions(mergedVariants)

        return mergedConsecutiveVariants
    }






    /**
     * Function to convert a AssemblyVariantInfo into a Pair<Position,Position> which will be the assembly starts and ends of the AssemblyVariantInfo
     */
    fun convertVariantInfoToPositionRange(variant: AssemblyVariantInfo) : Pair<Position,Position> {
        //get out the assembly coords
        val contig = variant.asmChrom
        val start = variant.asmStart
        val end = variant.asmEnd
        return Pair(Position(contig, start), Position(contig, end))
    }








    override fun run() {

        logCommand(this)

        val dbPath = if (dbPath.isBlank()) {
            System.getProperty("user.dir")
        } else {
            dbPath
        }

        // Verify the tiledbURI
        // If it doesn't an exception will be thrown
        val validDB = verifyURI(dbPath,"hvcf_dataset",condaEnvPrefix)
        if(metricsFile != "") {
            // twoGvcfs is not an option for the CLI, so we will always set it to false
            createASMHvcfs(dbPath, bed, referenceFile, mafDir, outputDir, metricsFile, skipMetrics, false,legacyMafFile)
        } else {
            createASMHvcfs(dbPath, bed, referenceFile, mafDir, outputDir, "$outputDir/VCFMetrics.tsv", skipMetrics, false,legacyMafFile)
        }

    }

}